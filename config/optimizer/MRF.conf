##
## The Markov Random Field (MRF) penalty is implemented for several types
## of neighborhood, potential functions, similarity and proximity factors.
## Available parameters are given below.
## The MRF penalty has the following expression:
## penalty = beta * sum_on_voxels * sum_on_neighborhood
##         * proximity_factor * similarity_factor * potential_function
## Note that the penalty strength (beta) is common to all penalty types so
## its value is provided within the command line with option -pnlt-beta.
##
## Important note about this configuration file: if multiple uses of a same
## keyword, only the first is considered. This means that this configuration
## file used as is would result in a neighborhood defined by the 6 nearest
## voxels, no proximity nor similarity factors, and a quadratic penalty. For
## different settings, unwanted options have to be commented.
##


###
###  N E I G H B O R H O O D
###

# The neighborhood shape is defined using the 'neighborhood shape' keyword
# with one of the following settings: '6-nearest', 'box' or 'sphere'.

# Simply the 6-nearest neighbors (4 in 2D)
neighborhood shape: 6-nearest

# Box neighborhood with the side of the box defined as '2*order+1'. Corner
# voxels can also be excluded as in some papers. The following example will
# lead to a box of 3x3x3 voxels where the 8 corners are removed, leading to
# 3x3x3-8-1=18 neighbors (as in Schramm et al, IEEE TMI vol 37 pp 590 2018).
neighborhood shape: box
box neighborhood order: 1
exclude box neighborhood corners: 1

# Spherical neighborhood with the radius provided in mm
neighborhood shape: sphere
sphere neighborhood radius (mm): 6


##
##  P R O X I M I T Y   F A C T O R S
##

# The proximity factors are used to weight the contribution of each neighbor
# to the global penalty, based on proximity to the voxel of interest. These
# factors are always normalized so that their sum is 1. They can be set using
# the 'proximity factor' keyword with one of the following setting.

# Uniform (no) proximity factors
proximity factor: none

# Factors inversely proportional to the distance in voxels from the voxel of
# interest (i.e. the distance unit is voxels; typically 1 for direct neighbors,
# sqrt(2) for diagonal neighbors in a same plane, sqrt(3) for diagonal neighbors
# in another plane, etc).
proximity factor: voxel

# Factors inversely proportional to the euclidian distance from the voxel of
# interest (i.e. the unit is mm).
proximity factor: euclidian


##
##  S I M I L A R I T Y   F A C T O R S
##

# The similarity factors are used to weight the contribution of each neighbor
# to the global penalty, based on similarity to the voxel of interest. These
# factors are not normalized by default. They can be set using the 'similarity
# factor' keyword based on one of the following setting.

# Uniform (no) similarity factors
similarity factor: none

# Factors based on the asymmetrical Bowsher's method and an additional image.
# The additional image must be provided using the '-multimodal' option in the
# command line. Based on additional image values, voxels of the neighborhood
# most similar to the voxel of interest will have a similarity factor of 1, and
# the other voxels will have a similarity factor of 0. The number of most similar
# voxels is parameterized by a percentage of the voxels included in the original
# neighborhood, set by the keyword 'similarity threshold Bowsher (%)'. For an
# explanation of asymmetrical Bowsher, see Schramm et al, IEEE TMI vol 37 pp 590,
# 2018.
similarity factor: aBowsher
similarity threshold Bowsher (%): 40.

##
##  P O T E N T I A L   F U N C T I O N
##


# The potential function actually penalizes the difference between the voxel of
# interest and a neighbor. It can be set using the 'potential function' keyword
# based on one of the following setting.

# The classical quadratic penalty: p(u,v) = 0.5*(u-v)^2
# Reference: Geman and Geman, IEEE Trans. Pattern Anal. Machine Intell., vol. PAMI-6,
# pp. 721-741, 1984.
potential function: quadratic

# The function from Geman & McClure: p(u,v,d) = (u-v)^2 / (d^2+(u-v)^2)
# The parameter 'd' can be set using the 'deltaGMC' keyword.
# Reference: Geman and McClure, Proc. Amer. Statist. Assoc., 1985.
potential function: geman mcclure
deltaGMC: 10.

# The function from Hebert and Leahy: p(u,v,m) = log(1+(u-v)^2/m^2)
# The parameter 'm' can be set using the 'muHL' keyword.
# Reference: Hebert and Leahy, IEEE Trans. Med. Imaging, vol. 8, pp. 194-202, 1989.
potential function: hebert leahy
muHL: 10.

# The log-cosh function from Green: p(u,v,d) = log(cosh((u-v)/d))
# The parameter 'd' can be set using the 'deltaLogCosh' keyword.
# Reference: Green, IEEE Trans. Med. Imaging, vol. 9, pp. 84-93, 1990.
potential function: green logcosh
deltaLogCosh: 10.

# The Huber piecewise quadratic-linear function:
# p(u,v,d) = d*abs(u-v)-0.5*d^2  if  abs(u-v) >  d
#          = 0.5*(u-v)^2         if  abs(u-v) <= d
# The parameter 'd' can be set using the 'deltaHuber' keyword.
# Reference: e.g. Mumcuoglu et al, Phys. Med. Biol., vol. 41, pp. 1777-1807, 1996.
potential function: huber piecewise
deltaHuber: 10.

# The relative differences from Nuyts: p(u,v,g) = (u-v)^2 / (u+v+g*abs(u-v))
# The parameter 'g' can be set using the 'gammaRD' keyword.
# Reference: Nuyts et al, IEEE Trans. Nucl. Sci., vol. 49, pp. 56-60, 2002.
potential function: nuyts relative
gammaRD: 2.

